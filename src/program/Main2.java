/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package program;

import entity.*;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.Optional;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import static program.Main.getCustomer;

/**
 *
 * @author md963
 */
public class Main2 extends javax.swing.JFrame {
    
    public static DAO customerDAO, itemDAO, ordersDAO;
    /**
     * Creates new form Main2
     */
    public Main2() {
        initComponents();
        refreshCustomerTable();
        refreshItemTable();
        refreshOrdersTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldQuantity = new javax.swing.JTextField();
        jTabbedPaneElectronicsSite = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabelID = new javax.swing.JLabel();
        jLabelFirstName = new javax.swing.JLabel();
        jLabelLastName = new javax.swing.JLabel();
        jLabelStreetAddress = new javax.swing.JLabel();
        jLabelCity = new javax.swing.JLabel();
        jLabelState = new javax.swing.JLabel();
        jLabelZip = new javax.swing.JLabel();
        jLabelPhoneNumber = new javax.swing.JLabel();
        jTextFieldID = new javax.swing.JTextField();
        jTextFieldFirstName = new javax.swing.JTextField();
        jTextFieldLastName = new javax.swing.JTextField();
        jTextFieldStreetAddress = new javax.swing.JTextField();
        jTextFieldCity = new javax.swing.JTextField();
        jTextFieldState = new javax.swing.JTextField();
        jTextFieldZip = new javax.swing.JTextField();
        jTextFieldPhoneNumber = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCustomer = new javax.swing.JTable();
        jButtonInsert = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabelItemID = new javax.swing.JLabel();
        jLabelItemName = new javax.swing.JLabel();
        jLabelPrice = new javax.swing.JLabel();
        jLabelUPC = new javax.swing.JLabel();
        jTextFieldItemID = new javax.swing.JTextField();
        jTextFieldItemName = new javax.swing.JTextField();
        jTextFieldPrice = new javax.swing.JTextField();
        jTextFieldUPC = new javax.swing.JTextField();
        jButtonInsertItem = new javax.swing.JButton();
        jButtonUpdateItem = new javax.swing.JButton();
        jButtonDeleteItem = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableItem = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabelOrderID = new javax.swing.JLabel();
        jLabelOrderItemID = new javax.swing.JLabel();
        jLabelOrderCustomerID = new javax.swing.JLabel();
        jLabelQuantity = new javax.swing.JLabel();
        jLabelDateTime = new javax.swing.JLabel();
        jTextFieldOrderID = new javax.swing.JTextField();
        jTextFieldOrderItemID = new javax.swing.JTextField();
        jTextFieldOrderCustomerID = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableOrders = new javax.swing.JTable();
        jButtonInsertOrder = new javax.swing.JButton();
        jButtonUpdateOrder = new javax.swing.JButton();
        jButtonDeleteOrder = new javax.swing.JButton();
        dateTimePicker1 = new com.github.lgooddatepicker.components.DateTimePicker();
        jSpinner1 = new javax.swing.JSpinner();

        jTextFieldQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldQuantityActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelID.setText("ID");

        jLabelFirstName.setText("First Name");

        jLabelLastName.setText("Last Name");

        jLabelStreetAddress.setText("Street Address");

        jLabelCity.setText("City");

        jLabelState.setText("State");

        jLabelZip.setText("Zip Code");

        jLabelPhoneNumber.setText("Phone Number");

        jTextFieldFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldFirstNameActionPerformed(evt);
            }
        });

        jTextFieldStreetAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldStreetAddressActionPerformed(evt);
            }
        });

        jTableCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "First Name", "Last Name", "Street Address", "City", "Zip Code", "State", "Phone Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCustomerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableCustomer);

        jButtonInsert.setText("OK");
        jButtonInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertActionPerformed(evt);
            }
        });

        jButtonUpdate.setText("Update");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelCity)
                                    .addComponent(jLabelStreetAddress)
                                    .addComponent(jLabelLastName)
                                    .addComponent(jLabelFirstName)
                                    .addComponent(jLabelID)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButtonInsert)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonUpdate)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonDelete)
                                .addGap(6, 6, 6))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldLastName)
                                    .addComponent(jTextFieldStreetAddress)
                                    .addComponent(jTextFieldCity)
                                    .addComponent(jTextFieldPhoneNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                                    .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelState)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldState))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelZip)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldZip)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 726, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabelCity, jLabelFirstName, jLabelID, jLabelLastName, jLabelPhoneNumber, jLabelState, jLabelStreetAddress, jLabelZip});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextFieldCity, jTextFieldFirstName, jTextFieldLastName, jTextFieldPhoneNumber, jTextFieldState, jTextFieldStreetAddress, jTextFieldZip});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonDelete, jButtonInsert, jButtonUpdate});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelID)
                    .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFirstName)
                    .addComponent(jTextFieldFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelLastName)
                    .addComponent(jTextFieldLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelStreetAddress)
                    .addComponent(jTextFieldStreetAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCity)
                    .addComponent(jTextFieldCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelZip)
                    .addComponent(jTextFieldZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelState)
                    .addComponent(jTextFieldState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInsert)
                    .addComponent(jButtonUpdate)
                    .addComponent(jButtonDelete))
                .addContainerGap(56, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabelCity, jLabelFirstName, jLabelID, jLabelLastName, jLabelPhoneNumber, jLabelState, jLabelStreetAddress, jLabelZip});

        jTabbedPaneElectronicsSite.addTab("Customer", jPanel1);

        jLabelItemID.setText("Item ID");

        jLabelItemName.setText("Item Name");

        jLabelPrice.setText("Price");

        jLabelUPC.setText("UPC");

        jButtonInsertItem.setText("OK");
        jButtonInsertItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertItemActionPerformed(evt);
            }
        });

        jButtonUpdateItem.setText("Update");
        jButtonUpdateItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateItemActionPerformed(evt);
            }
        });

        jButtonDeleteItem.setText("Delete");
        jButtonDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteItemActionPerformed(evt);
            }
        });

        jTableItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item ID", "Item Name", "Price", "UPC"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableItemMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableItem);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelItemName)
                            .addComponent(jLabelPrice)
                            .addComponent(jLabelUPC)
                            .addComponent(jLabelItemID, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldUPC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldItemID, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonInsertItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonUpdateItem)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDeleteItem)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 708, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTextFieldItemID, jTextFieldItemName, jTextFieldPrice, jTextFieldUPC});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonDeleteItem, jButtonInsertItem, jButtonUpdateItem});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelItemID, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldItemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelItemName)
                            .addComponent(jTextFieldItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelPrice)
                            .addComponent(jTextFieldPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelUPC)
                            .addComponent(jTextFieldUPC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(79, 79, 79)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonInsertItem)
                            .addComponent(jButtonUpdateItem)
                            .addComponent(jButtonDeleteItem))))
                .addContainerGap(146, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabelItemID, jLabelItemName, jLabelPrice, jLabelUPC});

        jTabbedPaneElectronicsSite.addTab("Item", jPanel2);

        jLabelOrderID.setText("Order ID");

        jLabelOrderItemID.setText("Item ID");

        jLabelOrderCustomerID.setText("Customer ID");

        jLabelQuantity.setText("Quantity");

        jLabelDateTime.setText("Date Time Purchased");

        jTextFieldOrderCustomerID.setToolTipText("");

        jTableOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Order ID", "Item ID", "Customer ID", "Quantity", "Date Time Purchased"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableOrdersMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableOrders);

        jButtonInsertOrder.setText("OK");
        jButtonInsertOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertOrderActionPerformed(evt);
            }
        });

        jButtonUpdateOrder.setText("Update");
        jButtonUpdateOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateOrderActionPerformed(evt);
            }
        });

        jButtonDeleteOrder.setText("Delete");
        jButtonDeleteOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelOrderID)
                            .addComponent(jLabelOrderCustomerID)
                            .addComponent(jLabelQuantity))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGap(70, 70, 70)
                                    .addComponent(jTextFieldOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextFieldOrderCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateTimePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabelOrderItemID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldOrderItemID, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelDateTime)
                            .addComponent(jButtonInsertOrder))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonUpdateOrder)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDeleteOrder)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 634, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dateTimePicker1, jTextFieldOrderCustomerID, jTextFieldOrderID, jTextFieldOrderItemID});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelOrderID)
                    .addComponent(jTextFieldOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelOrderItemID)
                    .addComponent(jTextFieldOrderItemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabelOrderCustomerID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelQuantity))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTextFieldOrderCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDateTime)
                    .addComponent(dateTimePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInsertOrder)
                    .addComponent(jButtonUpdateOrder)
                    .addComponent(jButtonDeleteOrder))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jTextFieldOrderID, jTextFieldOrderItemID});

        jTabbedPaneElectronicsSite.addTab("Orders", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneElectronicsSite, javax.swing.GroupLayout.DEFAULT_SIZE, 1027, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneElectronicsSite)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 private void refreshCustomerTable() {
        List<Customer> customers = customerDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableCustomer.getModel();
        //Clear all items in JtblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (Customer customer : customers) {
                Object[] row = new Object[8];
                row[0] = customer.getcustomerID();
                row[1] = customer.getFirstName();
                row[2] = customer.getLastName();
                row[3] = customer.getStreetAddress();
                row[4] = customer.getCity();
                row[5] = customer.getZipCode();
                row[6] = customer.getState();
                row[7] = customer.getPhoneNumber();
                
                
                model.addRow(row);
        }
    }
 private void refreshItemTable() {
        List<Item> items = itemDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableItem.getModel();
        //Clear all items in JtblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (Item item : items) {
                Object[] row = new Object[4];
                row[0] = item.getItemID();
                row[1] = item.getItemName();
                row[2] = item.getPrice();
                row[3] = item.getUPC();
                
                model.addRow(row);
        }
    }
 private void refreshOrdersTable() {
        List<Orders> orders = ordersDAO.getAll();
        DefaultTableModel model = (DefaultTableModel) jTableOrders.getModel();
        //Clear all items in JtblContacts
        for(int i = model.getRowCount() - 1; i >= 0; i-- ) {
            model.removeRow(i);
        }
        for (Orders order : orders) {
                Object[] row = new Object[5];
                row[0] = order.getOrderID();
                row[1] = order.getItem_ID();
                row[2] = order.getCustomer_ID();
                row[3] = order.getQuantity();
                row[4] = order.getDateTime();
                
                
          
                
                model.addRow(row);
        }
    }
    private void jTextFieldFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldFirstNameActionPerformed

    private void jTextFieldStreetAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldStreetAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldStreetAddressActionPerformed

    private void jButtonInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldID.getText().isEmpty()) {
            int customerID = Integer.parseInt(jTextFieldID.getText().trim());
            String firstName = jTextFieldFirstName.getText().trim();
            String lastName = jTextFieldLastName.getText().trim();
            String streetAddress = jTextFieldStreetAddress.getText().trim();
            String city = jTextFieldCity.getText().trim();
            int zipCode = Integer.parseInt(jTextFieldZip.getText().trim());
            String state = jTextFieldState.getText().trim();
            String phoneNumber = jTextFieldPhoneNumber.getText().trim();
            
            primaryKeyViolationCustomer(customerID);
            
            addCustomer(customerID, firstName,lastName, streetAddress, city, zipCode, state, phoneNumber);
            refreshCustomerTable();
            clearCustomerTextFields();
        }
        else
        {
            alert("ID cannot be empty", "Insert error");
        }
         if (jTextFieldFirstName.getText().length() > 13){
            alert("TEXT FIELD TOO LONG", "CHARACTER LENGTH ERROR ");
        } 
    }//GEN-LAST:event_jButtonInsertActionPerformed
    private void clearCustomerTextFields() {
        jTextFieldID.setText("");
        jTextFieldFirstName.setText("");
        jTextFieldLastName.setText("");
        jTextFieldStreetAddress.setText("");
        jTextFieldCity.setText("");
        jTextFieldZip.setText("");
        jTextFieldState.setText("");
        jTextFieldPhoneNumber.setText("");
    }
    
    private void jButtonInsertItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertItemActionPerformed
        // TODO add your handling code here:
       if (!jTextFieldItemID.getText().isEmpty()) {
            int itemID = Integer.parseInt(jTextFieldItemID.getText().trim());
            String itemName = jTextFieldItemName.getText().trim();
            int price = Integer.parseInt(jTextFieldPrice.getText().trim());
            int UPC = Integer.parseInt(jTextFieldUPC.getText().trim());
            
            primaryKeyViolationItem(itemID);
            
            
            additem(itemID, itemName, price, UPC);
            refreshItemTable();
            clearItemTextFields();
        }
       else if (!jTextFieldItemID.getText().isEmpty()) {
            int itemID = Integer.parseInt(jTextFieldItemID.getText().trim());
            String itemName = jTextFieldItemName.getText().trim();
            int price = Integer.parseInt(jTextFieldPrice.getText().trim());
            int UPC = Integer.parseInt(jTextFieldUPC.getText().trim());
            
            primaryKeyViolationItem(itemID);
            
            
            additem(itemID, itemName, price, UPC);
            refreshItemTable();
            clearItemTextFields();
        }
        else
        {
            alert("Item ID cannot be empty", "Insert error");
        }
        
        
    }//GEN-LAST:event_jButtonInsertItemActionPerformed
    private void clearItemTextFields() {
        jTextFieldItemID.setText("");
        jTextFieldItemName.setText("");
        jTextFieldPrice.setText("");
        jTextFieldUPC.setText("");
        
    }
    private void jButtonUpdateOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateOrderActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldOrderID.getText().isEmpty()) {
            int orderID = Integer.parseInt(jTextFieldOrderID.getText().trim());
            int Item_ID = Integer.parseInt(jTextFieldOrderItemID.getText().trim());
            int Customer_ID = Integer.parseInt(jTextFieldOrderCustomerID.getText().trim());
            int quantity = Integer.parseInt(jSpinner1.getValue().toString());
            String dateTime = dateTimePicker1.datePicker.getDateStringOrEmptyString() + " " + dateTimePicker1.timePicker.getTimeStringOrEmptyString()+":00.0";
            Orders order = getOrders(orderID);
            if(order.getOrderID() != -1) {
                foreignKeyViolationOrder(Customer_ID);
                foreignKeyViolationOrderI(Item_ID);
                updateOrders(orderID, quantity, dateTime, Customer_ID, Item_ID);
                refreshOrdersTable();
            }
            else
            {
                alert("Order does not exist", "Update error");
            }
        }
        else
        {
            alert("Order ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_jButtonUpdateOrderActionPerformed

    private void jTableCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCustomerMouseClicked
        // TODO add your handling code here:
        int i = jTableCustomer.getSelectedRow();
        TableModel model = jTableCustomer.getModel();
        jTextFieldID.setText(model.getValueAt(i, 0).toString());
        jTextFieldFirstName.setText(model.getValueAt(i, 1).toString());
        jTextFieldLastName.setText(model.getValueAt(i, 2).toString());
        jTextFieldStreetAddress.setText(model.getValueAt(i, 3).toString());
        jTextFieldCity.setText(model.getValueAt(i, 4).toString());
        jTextFieldZip.setText(model.getValueAt(i, 5).toString());
        jTextFieldState.setText(model.getValueAt(i, 6).toString());
        jTextFieldPhoneNumber.setText(model.getValueAt(i, 7).toString());
        
        
    }//GEN-LAST:event_jTableCustomerMouseClicked

    private void jTableItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableItemMouseClicked
        // TODO add your handling code here:
        int i = jTableItem.getSelectedRow();
        TableModel model = jTableItem.getModel();
        jTextFieldItemID.setText(model.getValueAt(i, 0).toString());
        jTextFieldItemName.setText(model.getValueAt(i, 1).toString());
        jTextFieldPrice.setText(model.getValueAt(i, 2).toString());
        jTextFieldUPC.setText(model.getValueAt(i, 3).toString());
    }//GEN-LAST:event_jTableItemMouseClicked

    private void jTableOrdersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableOrdersMouseClicked
        // TODO add your handling code here:
        int i = jTableOrders.getSelectedRow();
        TableModel model = jTableOrders.getModel();
        jTextFieldOrderID.setText(model.getValueAt(i, 0).toString());
        jTextFieldOrderItemID.setText(model.getValueAt(i, 1).toString());
        jTextFieldOrderCustomerID.setText(model.getValueAt(i, 2).toString());
        jTextFieldQuantity.setText(model.getValueAt(i, 3).toString());
        String datetime  = model.getValueAt(i, 4).toString();
        
         LocalDate date1 = LocalDate.of(Integer.parseInt(datetime.substring(0, 4)) , 
                Integer.parseInt(datetime.substring(5, 7)), Integer.parseInt(datetime.substring(8, 10)));
        LocalTime time1 = LocalTime.of(Integer.parseInt(datetime.substring(11, 13)), Integer.parseInt(datetime.substring(14, 16)));
        
        dateTimePicker1.datePicker.setDate(date1);
        dateTimePicker1.timePicker.setTime(time1);
        
    }//GEN-LAST:event_jTableOrdersMouseClicked

    private void jTextFieldQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldQuantityActionPerformed

    private void jButtonInsertOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertOrderActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldOrderID.getText().isEmpty()) {
            int orderID = Integer.parseInt(jTextFieldOrderID.getText().trim());
            int Item_ID = Integer.parseInt(jTextFieldOrderItemID.getText().trim());
            int Customer_ID = Integer.parseInt(jTextFieldOrderCustomerID.getText().trim());
            int quantity = Integer.parseInt(jSpinner1.getValue().toString()); 
            
            String dateTime = dateTimePicker1.datePicker.getDateStringOrEmptyString() + " " + dateTimePicker1.timePicker.getTimeStringOrEmptyString()+":00.0";
            
            primaryKeyViolationOrder(orderID);
            StringViolationError(orderID);
            foreignKeyViolationOrder(Customer_ID);
            foreignKeyViolationOrderI(Item_ID);
            addOrders(orderID, quantity, dateTime, Customer_ID, Item_ID);
            refreshOrdersTable();
            clearOrderTextFields();
            
        }
        else
        {
            alert("ID cannot be empty", "Insert error");
        }
    }//GEN-LAST:event_jButtonInsertOrderActionPerformed
    private void clearOrderTextFields() {
        jTextFieldOrderID.setText("");
        jTextFieldOrderItemID.setText("");
        jTextFieldOrderCustomerID.setText("");
        jTextFieldQuantity.setText("");
        dateTimePicker1.datePicker.clear();
        dateTimePicker1.timePicker.clear();
        
        
        
    }
    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        // TODO add your handling code here:
       if (!jTextFieldID.getText().isEmpty()) {
            int customerID = Integer.parseInt(jTextFieldID.getText().trim());
            String firstName = jTextFieldFirstName.getText().trim();
            String lastName = jTextFieldLastName.getText().trim();
            String streetAddress = jTextFieldStreetAddress.getText().trim();
            String city = jTextFieldCity.getText().trim();
            int zipCode = Integer.parseInt(jTextFieldZip.getText().trim());
            String state = jTextFieldState.getText().trim();
            String phoneNumber = jTextFieldPhoneNumber.getText().trim();
            Customer customer = getCustomer(customerID);
            if(customer.getcustomerID() != -1) {                
            updateCustomer(customerID, firstName,lastName, streetAddress, city, zipCode, state, phoneNumber);
            refreshCustomerTable();
            }
            else
            {
                alert("Customer does not exist", "Update error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Update error");
        }
        
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonUpdateItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateItemActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldItemID.getText().isEmpty()) {
            int itemID = Integer.parseInt(jTextFieldItemID.getText().trim());
            String itemName = jTextFieldItemName.getText().trim();
            int price = Integer.parseInt(jTextFieldPrice.getText().trim());
            int UPC = Integer.parseInt(jTextFieldUPC.getText().trim());
            Item item = getItem(itemID);
            if(item.getItemID() != -1) {                
            updateItem(itemID, itemName, price, UPC);
            refreshItemTable();
            }
            else
            {
                alert("Item does not exist", "Update error");
            }
        }
        else
        {
            alert("Item ID cannot be empty", "Update error");
        }
    }//GEN-LAST:event_jButtonUpdateItemActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldID.getText().isEmpty()) {
            int customerID = Integer.parseInt(jTextFieldID.getText().trim());
            String firstName = jTextFieldFirstName.getText().trim();
            String lastName = jTextFieldLastName.getText().trim();
            String streetAddress = jTextFieldStreetAddress.getText().trim();
            String city = jTextFieldCity.getText().trim();
            int zipCode = Integer.parseInt(jTextFieldZip.getText().trim());
            String state = jTextFieldState.getText().trim();
            String phoneNumber = jTextFieldPhoneNumber.getText().trim();
            Customer customer = getCustomer(customerID);
            if(customer.getcustomerID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    deleteCustomer(customerID, firstName,lastName, streetAddress, city, zipCode, state, phoneNumber);
                    refreshCustomerTable();
                    clearCustomerTextFields();
                }
            }
            else
            {
                alert("Customer does not exist", "Delete error");
            }
        }
        else
        {
            alert("ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteItemActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldItemID.getText().isEmpty()) {
            int itemID = Integer.parseInt(jTextFieldItemID.getText().trim());
            String itemName = jTextFieldItemName.getText().trim();
            int price = Integer.parseInt(jTextFieldPrice.getText().trim());
            int UPC = Integer.parseInt(jTextFieldUPC.getText().trim());
            Item item = getItem(itemID);
            if(item.getItemID() != -1) {       
            int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
            if(option == 0) {
                deleteItem(itemID, itemName, price, UPC);
                refreshItemTable();
                clearItemTextFields();
                }
            }
            else
            {
                alert("Item does not exist", "Delete error");
            }
        }
        else
        {
            alert("Item ID cannot be empty", "Delete  error");
        }
    }//GEN-LAST:event_jButtonDeleteItemActionPerformed

    private void jButtonDeleteOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteOrderActionPerformed
        // TODO add your handling code here:
        if (!jTextFieldOrderID.getText().isEmpty()) {
            int orderID = Integer.parseInt(jTextFieldOrderID.getText().trim());
            int Item_ID = Integer.parseInt(jTextFieldOrderItemID.getText().trim());
            int Customer_ID = Integer.parseInt(jTextFieldOrderCustomerID.getText().trim());
            int quantity = Integer.parseInt(jSpinner1.getValue().toString());
            String dateTime = dateTimePicker1.datePicker.getDateStringOrEmptyString() + " " + dateTimePicker1.timePicker.getTimeStringOrEmptyString()+":00.0";
            Orders order = getOrders(orderID);
            if(order.getOrderID() != -1) {
                int option = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to Delete?", "Delete confirmation", JOptionPane.YES_NO_OPTION);
                if(option == 0) {
                    foreignKeyViolationOrder(Customer_ID);
                    foreignKeyViolationOrderI(Item_ID);
                    deleteOrders(orderID, quantity, dateTime, Customer_ID, Item_ID);
                    refreshOrdersTable();
                    clearOrderTextFields();
                }
            }
            else
            {
                alert("Order does not exist", "Delete error");
            }
        }
        else
        {
            alert("Order ID cannot be empty", "Delete error");
        }
    }//GEN-LAST:event_jButtonDeleteOrderActionPerformed

    private static void addCustomer(int customerID, String firstName, String lastName, String streetAddress, String city, int zipCode, String state,String phoneNumber) {
        Customer customer;
        customer = new Customer(customerID, firstName,lastName, streetAddress, city, zipCode, state, phoneNumber);
        customerDAO.insert(customer);
    }
    private static void updateCustomer(int customerID, String firstName, String lastName, String streetAddress, String city, int zipCode, String state,String phoneNumber) {
        Customer customer;
        customer = new Customer(customerID, firstName,lastName, streetAddress, city, zipCode, state, phoneNumber);
        customerDAO.update(customer);
    }
    private static void deleteCustomer(int customerID, String firstName, String lastName, String streetAddress, String city, int zipCode, String state,String phoneNumber) {
        Customer customer;
        customer = new Customer(customerID, firstName,lastName, streetAddress, city, zipCode, state, phoneNumber);
        customerDAO.delete(customer);
    }
    private static void additem(int itemID, String itemName, int price, int UPC) {
        Item item;
        item = new Item(itemID, itemName, price, UPC);
        itemDAO.insert(item);
    }
    private static void updateItem(int itemID, String itemName, int price, int UPC) {
        Item item;
        item = new Item(itemID, itemName, price, UPC);
        itemDAO.update(item);
    }
    private static void deleteItem(int itemID, String itemName, int price, int UPC) {
        Item item;
        item = new Item(itemID, itemName, price, UPC);
        itemDAO.delete(item);
    }
    private static void addOrders(int orderID, int quantity, String dateTime, int Customer_ID, int Item_ID) {
        Orders order;
        order = new Orders(orderID, quantity, dateTime, Customer_ID, Item_ID);
        ordersDAO.insert(order);
    }
     private static void updateOrders(int orderID, int quantity, String dateTime, int Customer_ID, int Item_ID) {
        Orders order;
        order = new Orders(orderID, quantity, dateTime, Customer_ID, Item_ID);
        ordersDAO.update(order);
    }
     private static void deleteOrders(int orderID, int quantity, String dateTime, int Customer_ID, int Item_ID) {
        Orders order;
        order = new Orders(orderID, quantity, dateTime, Customer_ID, Item_ID);
        ordersDAO.delete(order);
    }
    //method to show an info alert
    public void alert(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }
    //method to show an error alert
    public void alert(String msg, String title) {
        JOptionPane.showMessageDialog(rootPane, msg, title, JOptionPane.ERROR_MESSAGE);
    }
    public void primaryKeyViolationCustomer(int customerID) { //both were id
        if(getCustomer(customerID).getcustomerID()!= -1) {
            alert("Another customer already exists with same Customer ID, please try another Customer ID", "Primary Key Violation"); 
        }
    }
    
    static Customer getCustomer(int customerID) {
        Optional<Customer> customer = customerDAO.get(customerID);
        return customer.orElseGet(() -> new Customer(-1, "Non-exist", "Non-exist", "Non-exist", "Non-exist", -1, "Non-exist", "Non-exist" ));
    }
     public void primaryKeyViolationItem(int itemID) { //c
        if(getItem(itemID).getItemID()!= -1) { //c
            alert("Another Item already exists with same Item ID, please try another Item ID", "Primary Key Violation"); //c
        }
    }
     static Item getItem(int itemID) {
        Optional<Item> item = itemDAO.get(itemID);
        return item.orElseGet(() -> new Item(-1, "Non-exist", -1, -1 ));
    }
     public void primaryKeyViolationOrder(int orderID) {
        if(getOrders(orderID).getOrderID() != -1) {
            alert("Another order already exists with same Order ID, please try another Order ID", "Primary Key Violation");
        }
    }
    public void StringViolationError(int orderID) {
        
        if(getOrders(orderID).getOrderID() != -1) {
            alert("Another order already exists with same Order ID, please try another Order ID", "Primary Key Violation");
        }
    }
    
     //StringViolationError(orderID);
     static Orders getOrders(int orderID) {
        Optional<Orders> order = ordersDAO.get(orderID);
        return order.orElseGet(() -> new Orders(-1, -1, "Non-exist", -1, -1 ));
    }
     public void foreignKeyViolationOrder(int Customer_ID) {
        if(getCustomer(Customer_ID).getcustomerID() == -1) {
            alert("Customer ID does not exist", "Foreign Key Violation");
        }
    }
     public void foreignKeyViolationOrderI(int Item_ID) {
        if(getItem(Item_ID).getItemID() == -1) {
            alert("Item ID does not exist", "Foreign Key Violation");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        customerDAO = new CustomerDAO();
        itemDAO = new ItemDAO();
        ordersDAO = new OrdersDAO();
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.DateTimePicker dateTimePicker1;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonDeleteItem;
    private javax.swing.JButton jButtonDeleteOrder;
    private javax.swing.JButton jButtonInsert;
    private javax.swing.JButton jButtonInsertItem;
    private javax.swing.JButton jButtonInsertOrder;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JButton jButtonUpdateItem;
    private javax.swing.JButton jButtonUpdateOrder;
    private javax.swing.JLabel jLabelCity;
    private javax.swing.JLabel jLabelDateTime;
    private javax.swing.JLabel jLabelFirstName;
    private javax.swing.JLabel jLabelID;
    private javax.swing.JLabel jLabelItemID;
    private javax.swing.JLabel jLabelItemName;
    private javax.swing.JLabel jLabelLastName;
    private javax.swing.JLabel jLabelOrderCustomerID;
    private javax.swing.JLabel jLabelOrderID;
    private javax.swing.JLabel jLabelOrderItemID;
    private javax.swing.JLabel jLabelPhoneNumber;
    private javax.swing.JLabel jLabelPrice;
    private javax.swing.JLabel jLabelQuantity;
    private javax.swing.JLabel jLabelState;
    private javax.swing.JLabel jLabelStreetAddress;
    private javax.swing.JLabel jLabelUPC;
    private javax.swing.JLabel jLabelZip;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTabbedPane jTabbedPaneElectronicsSite;
    private javax.swing.JTable jTableCustomer;
    private javax.swing.JTable jTableItem;
    private javax.swing.JTable jTableOrders;
    private javax.swing.JTextField jTextFieldCity;
    private javax.swing.JTextField jTextFieldFirstName;
    private javax.swing.JTextField jTextFieldID;
    private javax.swing.JTextField jTextFieldItemID;
    private javax.swing.JTextField jTextFieldItemName;
    private javax.swing.JTextField jTextFieldLastName;
    private javax.swing.JTextField jTextFieldOrderCustomerID;
    private javax.swing.JTextField jTextFieldOrderID;
    private javax.swing.JTextField jTextFieldOrderItemID;
    private javax.swing.JTextField jTextFieldPhoneNumber;
    private javax.swing.JTextField jTextFieldPrice;
    private javax.swing.JTextField jTextFieldQuantity;
    private javax.swing.JTextField jTextFieldState;
    private javax.swing.JTextField jTextFieldStreetAddress;
    private javax.swing.JTextField jTextFieldUPC;
    private javax.swing.JTextField jTextFieldZip;
    // End of variables declaration//GEN-END:variables
}
